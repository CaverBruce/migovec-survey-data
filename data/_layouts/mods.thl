encoding  utf-8

# Colour the latest additions red

lookup explo-date:latest
	[1999.12.31 2018.12.31] [100 100 100] "before 2019"
	2019.12.31 [100 50 50] "	2019 expeditions"
endlookup

layout colour-by-new
	colour map-fg explo-date:latest
endlayout

# Colour all passage base on date of discovery

layout colour-by-date
	colour map-fg explo-date
endlayout

# Colour all passages based on depth

layout colour-by-depth
	colour map-fg depth
endlayout

# Show centreline and stations

layout show-centreline
	code metapost
		def l_survey_cave (expr P) =
			T:=identity;
			pair zz[];
			pickup PenC;
			for t = 0 upto length P - 1:
			zz1 := point t of P;
			zz2 := point t+1 of P;
			draw zz1 -- zz2 withcolor (0.5,0.3,0.3);
			endfor;
		enddef;
	endcode
	symbol-show line survey
	symbol-show point station
	symbol-colour point station [50 30 30]
endlayout

layout basic
	scale 1 2000
	min-symbol-scale M
	fonts-setup 8 9 10 11 12
endlayout

layout detailed
  legend on
  map-header 0 95 ne
  statistics topo-length off
  fonts-setup 5 8 11 18 20

  #_____________________________________________________________
  #                                                             |
  #                            LINE TYPES                       |
  #_____________________________________________________________|
      
      
      code metapost
      ##### SPECIFIC WALL TYPES
      # BLOCKS

      def l_u_overlay_MY (expr P)=
      T:=identity;
      pickup PenA;
      thdraw P withcolor (0.5,0.75,0.95);
      enddef;

      def l_u_underlay_MY (expr Path)=
        T:=identity;
        pickup PenA;
        thdraw Path withcolor(0.55,0.55,0.55);
      enddef;

      def l_u_mine_MY (expr Path)=
        T:=identity;
        pickup PenA;
        thdraw Path withcolor(0.82,0.55,0.82);
      enddef;
       
       
      
      # ICE
      def l_wall_ice_MY (expr P) = 
        T:=identity;
        thdraw P withcolor(0,0.7,0.9);
      enddef;
      
      
      #### TYPES INSIDE A PASSAGE
      
      # EXPOSURE OF BEDROCK
      
      def l_u_texture_MY (expr P)=
        T:=identity;
        thdraw P withpen PenD withcolor (0.3,0.3,0.3);
      enddef;

      # CONTOUR
      
      def l_contour_MY (expr P)(text txt) =
        T:=identity;
        pickup PenC;
        thdraw P;
      enddef;

      # CENTRELINE
      
      def l_survey_cave_MY (expr P) =
        T:=identity;
        draw P withpen PenD withcolor (0.7,0,0);
      enddef;
      
      # FLOWSTONE
      def l_u_wall_flowstone_MY (expr P)=
        T:=identity;
        cas := 0;
        dlzka := arclength P;
        if dlzka > 0:
          mojkrok:=adjust_step(dlzka, 0.5u);
          pickup PenC;
          forever:
            t1 := arctime (cas + mojkrok*2.5/10) of P;
            t1b := arctime (cas + mojkrok*4/10) of P;
            t2 := arctime (cas + mojkrok*7.5/10) of P;
            t2b := arctime (cas + mojkrok*6/10) of P;
            t2a :=arctime (cas +mojkrok*7.49/10) of P;
            
            q := ((point t1 of P) + 0.05u * unitvector(thdir(P,t1) rotated -115)) .. 
                  ((point t1b of P) - .01u * unitvector(thdir(P,t1b) rotated -90)) ..
                 ((point t2b of P) - .01u * unitvector(thdir(P,t1b) rotated -90)) ..
                 ((point t2 of P) + .05u * unitvector(thdir(P,t2) rotated -65))--
                 ((point t2a of P) + .05u * unitvector(thdir(P,t2a) rotated -65)) ..
                 ((point t2b of P) + .01u * unitvector(thdir(P,t1b) rotated -90)) ..
                 ((point t1b of P) + .01u * unitvector(thdir(P,t1b) rotated -90)) ..
                 ((point t1 of P) + .05u * unitvector(thdir(P,t1) rotated -115));
            
            thdraw q withcolor(0.85,0.45,0.1);
            cas := cas + mojkrok;
            exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
          endfor;
        fi;
      enddef;
      
  #_____________________________________________________________
  #                                                             |
  #                            AREA TYPES                       |
  #_____________________________________________________________|

       # WATER
        def a_water_MY (expr p) =
         T:=identity;
         thfill p withcolor (0.1,0.1,0.25);
       enddef;
      
       # ICE
        beginpattern(pattern_ice_MY);
          pickup PenC;
          p:=(-.15u,0)--(.15u,0);
          draw p shifted(0.15,0.25u);
          draw p rotated -90 shifted (.3u,0.2u);
          patternxstep(0.6u);
          patternystep(0.6u);
          patterncolor(0,0.7,0.9);
       endpattern;
       
       def a_ice_MY (expr Path) =
        T:=identity;
        thclean Path;
        thfill Path withpattern pattern_ice_MY;
      enddef;
      
      # SNOW
      def a_snow_MY (expr P) =
        T:=identity;
        thclean P;
        thfill P withcolor (0.96, 0.96, 1);
      enddef;
      
      # SEDIMENTARY FILLS
      
      # CLAY
      
        beginpattern(pattern_clay_MY);
          pickup PenD;
          p:= (-.008u,0)--(.008u,0);
          draw p;
          draw p rotated 25 shifted(.1u,0.1u);
          #draw p rotated 45 shifted(.02u,0.005u);
          #draw p rotated 75 shifted(.005u,0.015u);
          #draw p shifted(.03u,0.025u);
          #draw p shifted(.035u,0.01u);
          patternxstep(0.2u);
          patternystep(0.2u);
          patterncolor(0.65,0.55,0.1);
       endpattern;
       
       def a_clay_MY (expr Path) =
        T:=identity;
        thclean Path;
        thfill Path withcolor(0.65,0.55,0.1);
        thfill Path withpattern pattern_clay_MY;
      enddef;
      
      ## now deprecated?
      def a_thing_MY (expr p) =
        T:=identity;
        thclean p;
        pickup PenD;
        path q; q = bbox p;
        picture tmp_pic, tmp_ice;
        pair z;
        tmp_ice := image (
          draw (-.005u,0)--(.005u,0);
        );
        tmp_pic := image(
          for i = xpart llcorner q step .1u until xpart urcorner q:
            for j = ypart llcorner q step .1u until ypart urcorner q:
              z := ((i,j) randomized 0.02u);
              if xpart (p intersectiontimes ((bbox tmp_ice) shifted z)) < 0:
                draw tmp_ice shifted z;
              fi;
            endfor;
          endfor;
          );
        clip tmp_pic to p;
        drawoptions();
        draw tmp_pic;
      enddef;
      
      # SAND
      def a_sand_MY (expr p) =
        T:=identity;
        thclean p;
        pickup PenB;
        thfill p withcolor(0.85,0.8,0.5);
        path q; q = bbox p;
        picture tmp_pic, tmp_ice;
        pair z;
        tmp_ice := image (
          draw (-.005u,0)--(.007u,0);
        );
        tmp_pic := image(
          for i = xpart llcorner q step .35u until xpart urcorner q:
            for j = ypart llcorner q step .35u until ypart urcorner q:
              z := ((i,j) randomized 0.2u);
              if xpart (p intersectiontimes ((bbox tmp_ice) shifted z)) < 0:
                draw tmp_ice shifted z;
              fi;
            endfor;
          endfor;
          );
        clip tmp_pic to p;
        drawoptions();
        draw tmp_pic;
      enddef;
      
      # PEBBLES
      def a_pebbles_MY (expr p) =
        T:=identity;
        thclean p;
        pickup PenD;
        path q; q = bbox p;
        picture tmp_pic;
        picture tmp_pebblea;
        picture tmp_pebbleb;
        pair z;
        pair za;
        tmp_pebblea := image (
          draw (((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle) scaled 0.035u) withcolor(0.5,0.5,0.5);
          fill (((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle) scaled 0.035u) withcolor(0.95,0.95,0.95);
        );
        tmp_pebbleb := image (
          draw (((((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle)rotated 35)  scaled 0.025u) shifted (0.2u,0.2u)) withcolor(0.5,0.5,0.5);
          fill (((((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle)rotated 35) scaled 0.025u) shifted (0.2u,0.2u)) withcolor(0.95,0.95,0.95);
        );
        tmp_pic := image(
          for i = xpart llcorner q step .4u until xpart urcorner q:
            for j = ypart llcorner q step .4u until ypart urcorner q:
              z := ((i,j) randomized 0.3u);
              za :=((i,j) randomized 0.4u) ;
              if xpart (p intersectiontimes ((bbox tmp_pebblea) shifted z)) < 0:
                draw tmp_pebblea shifted z;
                draw tmp_pebbleb shifted z;
               
              fi;
            endfor;
          endfor;
          );
        clip tmp_pic to p;
        drawoptions();
        draw tmp_pic;
      enddef;

  #_____________________________________________________________
  #                                                             |
  #               NOW WE INITIATE ALL THE SYMBOLS               |
  #_____________________________________________________________|
     
     ## points
      # redefinitions 
      initsymbol("p_pillar_MY");
      initsymbol("p_stalagmite_MY");
      initsymbol("p_stalactite_MY");
      initsymbol("p_airdraught_MY");
      initsymbol("p_gradient_MY");
      
      initsymbol("p_u_logger_MY");
      initsymbol("p_u_waterdrip_MY");
      initsymbol("p_u_sampled_MY");
     
     ## lines
      # redefinitions
      # wall types
      initsymbol("l_wall_ice_MY");
      initsymbol("l_u_overlay_MY");
      initsymbol("l_u_mine_MY");
      initsymbol("l_u_underlay_MY");
      
      # others
      initsymbol("l_survey_cave_MY");
      initsymbol("l_pit_MY");
      initsymbol("l_contour_MY");
      
      
      # user defined
      initsymbol("l_u_texture_MY");
      initsymbol("l_u_wall_flowstone_MY");
     
     ## areas
      # redefinitions
      initsymbol("a_snow_MY");
      initsymbol("a_ice_MY");
      initsymbol("a_sand_MY");
      initsymbol("a_pebbles_MY");

  endcode

  #_____________________________________________________________
  #                                                             |
  #          WE ASSIGN THE SYMBOLS TYPES AND COLOURS            |
  #_____________________________________________________________|

   ## survey lines and stations
   symbol-assign point station AUT
   symbol-assign line survey MY
   symbol-assign point station MY
   symbol-hide point passage-height
   symbol-colour point station-name [70 0 0]
   
   ## water and ice
   symbol-assign area ice MY
   symbol-assign area snow MY
   
   symbol-colour area ice [0 70 90]
   symbol-colour area water [0 10 70]
   symbol-colour area sump [0 10 70]
   symbol-colour point water-flow [0 10 70]
   symbol-colour point station-name [70 0 0]
   
   ## formations
   symbol-assign point stalagmite MY
   symbol-assign point stalactite MY
   symbol-assign point pillar MY
   
   symbol-colour point flowstone [85 45 10]
   symbol-color line wall:flowstone [85 45 10]
   symbol-colour point flowstone [85 45 10]
   symbol-colour point pillar [85 45 10]
   symbol-colour point stalagmite [85 45 10]
   symbol-colour point stalactite [85 45 10]
   symbol-colour point curtain [85 45 10]
   symbol-colour point helictite [85 45 10]
   symbol-colour point soda-straw [85 45 10]
   symbol-colour point crystal [85 45 10]
   
   ## sedimentary fills
   symbol-assign line rock-border MY
   symbol-assign area clay MY
   symbol-assign area sand MY
   symbol-assign area pebbles MY
   
   symbol-colour area clay [65 55 10]
   symbol-colour line wall:clay [65 55 10]
   symbol-colour area sand [85 75 10]
   symbol-colour line border [25 25 25]
   
   ## misc
   symbol-assign point gradient MY
   symbol-assign line contour MY
   symbol-assign line pit AUT
   symbol-assign line wall MY
   symbol-assign point breakdown-choke AUT
   symbol-assign point air-draught MY

  endlayout

  #_____________________________________________________________
  #                                                             |
  #          FINALLY, WE DEFINE THE LEGEND LABELS               |
  #_____________________________________________________________|

  #english labels
  text en "point u:logger_MY"  "logger"
  text en "line u:flowstone_MY" "flowstone  wall"
  text en "line u:openshaft_MY" "open shaft"
  text en "line u:texture_MY" "bedrock exposed"
  text en "point u:waterdrip_MY" "water drips"
  text en "point u:sampled_MY" "sample taken"
  text en "line u:wall_flowstone_MY" "wall flowstone"
  text en "line u:overlay_MY" "overlying passage"
  text en "line u:mine_MY" "mine addit"


  #german labels ## probs need to be translated to slovene
  text de "line u:wall_flowstone_MY" "Sinterfläche"
  text de "line u:texture_MY" "Felsboden"
  text de "line u:flowstone_MY" "flächiger Sinter"
  text de "line u:underlay_MY" "Unterlagerung"
  text de "line u:mine_MY" "Bergbau"
