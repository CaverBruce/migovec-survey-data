encoding  utf-8
source ../../M17.th

input ../../../_layouts/detailed-p.thl
input ../../../_layouts/detailed-e.thl

select  m-all-p@M17


#export map -projection extended -o ../outputs/M17_extended.pdf -layout map2 -layout-debug station-names

layout local
	copy detailed
	scale 1 400

	symbol-hide line survey
	symbol-hide point station
	symbol-hide point station-name
	symbol-hide point remark
	symbol-hide line label
	symbol-show point entrance
	symbol-show point label
	symbol-colour line border [0 70 90]

    map-comment "Migovec Plateau<br>Cadastral Number: 5878<br>Length: ___ m, Depth: 98 m<br>Entrance elevation: 1879 m<br>Coordinates (EPSG:3794): _____ / _____"

		code tex-map
		\def\maplayout{
		\legendbox{-10}{135}{SW}{\size[26]\the\cavename}
		\legendbox{-10}{130}{NW}{\size[10]\the\comment}
		\legendbox{50}{-30}{N}{\scalebar}
		\legendbox{50}{-25}{S}{\northarrow}
	}
	endcode
endlayout

#----------------------------------------------------------------------------------|
# export the pdf map containing plan
export map -o ../_outputs/M17_plan.pdf -projection plan -layout local

select  m-all-e@M17

#----------------------------------------------------------------------------------|
# define a local layout without legend or header for extended elevation
layout local-e
	copy detailed-e
	legend off
	map-header 0 0 off
	symbol-colour line border [0 70 90]
	symbol-show point label
	symbol-hide line label
	symbol-hide point remark
	symbol-hide line arrow
	symbol-show area snow
	scale 1 400
	map-image -5 100  ne ../_outputs/M17_plan.pdf
endlayout



#----------------------------------------------------------------------------------|
# export the pdf map in elevation view
#export map -o ../_outputs/M17_ee.pdf -projection extended -layout local-e


layout local-pink-e

	
	legend off
	map-header 0 0 off

	code metapost
		def a_snow_MY (expr p) =
			T:=identity;
			thfill p withcolor (0.99,0.75,0.82);
		enddef;

		def a_ice_MY (expr p) =
			T:=identity;
			thfill p withcolor (0.99,0.75,0.82);
		enddef;

		 def l_wall_blocks_MY (expr P)=
		  T:=identity;
		  cas := 0;
		  dlzka := arclength P;
		  if dlzka > 0:
		  mojkrok:=adjust_step(dlzka, 0.3u);
		  pickup PenD;
		  forever:
		  t_0 := arctime(cas) of P;
		  t_end := arctime(cas+mojkrok) of P;
		  t1 := arctime (cas + (2+1.3*normaldeviate)/10*mojkrok) of P;
		  t2 := arctime (cas + (8-1.2*normaldeviate)/10*mojkrok) of P;
		  t3 := arctime (cas + (2.5+1.2*normaldeviate)/10*mojkrok) of P;
		  t4 := arctime (cas + (8.5-1.3*normaldeviate)/10*mojkrok) of P;
		  sk := 1-.25*normaldeviate;
		  q := (point t_0 of P) -- ((point t1 of P) + .05*sk*u * unitvector(thdir(P,t1) rotated (-88+normaldeviate*4))) --
		  ((point t2 of P) + .05*sk*u * unitvector(thdir(P,t2) rotated (-88+normaldeviate*4))) -- (point t_end of P) -- ((point t4 of P) - .1*sk*u * unitvector(thdir(P,t4) rotated (-88+normaldeviate*4))) --
		  ((point t3 of P) - .1*sk*u * unitvector(thdir(P,t3) rotated (-88+normaldeviate*4))) -- cycle;
		  
		  thdraw q withcolor(0.3,0.3,0.3);
		  cas := cas + mojkrok;
		  exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
		  endfor;
		  fi;
		enddef;

		def l_u_texture_MY (expr P)=
		  T:=identity;
		  thdraw P withpen PenD withcolor (0.3,0.3,0.3);
		enddef;

		initsymbol("l_wall_blocks_MY");
		initsymbol("a_snow_MY");
		initsymbol("a_ice_MY");
		initsymbol("l_u_texture_MY");
	endcode

	symbol-hide group all
	symbol-hide line arrow
	symbol-hide point remark
	symbol-hide line label
	symbol-show line wall

	symbol-show area snow
	symbol-assign area snow MY
	symbol-assign area ice MY
	symbol-assign line wall:blocks MY
	symbol-show area ice
	
	#symbol-colour area ice [90 0 70]
	symbol-show line border
	symbol-colour line border [85 50 58]
	symbol-colour line wall:ice [85 50 58]

	symbol-hide line survey
	symbol-hide point station
	scale 1 1000
	#map-image -5 100  ne ../_outputs/M17_elevation.pdf
endlayout

export map -o ../_outputs/M17_ee_pink.pdf -projection extended -layout local-pink-e
